{
	"info": {
		"_postman_id": "763a0ebe-0d50-478c-ad1e-232ca15d6be8",
		"name": "Restful Booker",
		"description": "## Restful Booker\n\n<img src=\"https://content.pstmn.io/a7eab71f-6bff-4a03-93ab-b41e2e8eed3b/b2ctaW1hZ2UucG5n\" alt=\"\">\n\n## API documentation for the playground API restful-booker.",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "22921253",
		"_collection_link": "https://www.postman.com/islamtouba/workspace/restful-booker/collection/22921253-763a0ebe-0d50-478c-ad1e-232ca15d6be8?action=share&source=collection_link&creator=22921253"
	},
	"item": [
		{
			"name": "1- Auth",
			"item": [
				{
					"name": "1.1 Create Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[1.1] TC01 Validate Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC08 Validate Response Schema is Valid\", function () {\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"token\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"token\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC03 Validate Check Login response body contain token\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"token\")\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC04 Validate Check Login response body not contain token\", function(){\r",
									"    pm.expect(pm.response.json()).to.not.have.property(\"Token\")\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC05 Validate Check Login response body contain token not null\",function(){\r",
									"    pm.expect(pm.response.json().token).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC06 Validate Check Login response body contain token not empty\",function(){\r",
									"    pm.expect(pm.response.json().token).to.not.be.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC07 Validate Check Login length is greater than 12  digit\", function () {\r",
									"    pm.expect(pm.response.json().token.length).to.be.greaterThan(12);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC08 Validate Check token type not integer\", function(){\r",
									"pm.expect(typeof pm.response.json().token).to.not.be.equal(\"integer\")\r",
									"});\r",
									"\r",
									"/////////////////////////\r",
									"pm.test(\"[1.1] TC089 set token to collection variable\", function () {\r",
									"\r",
									"pm.collectionVariables.set(\"token\", pm.response.json().token);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " \r\n    {\r\n        \"username\": \"admin\",\r\n        \"password\": \"password123\"\r\n    }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}/auth",
						"description": "### 🔐 1. Auth - Create Token\n\nDescription: Creates a new auth token to use for access to the PUT and DELETE /booking.\n\n  \nUse this token to unlock special powers — like updating or deleting bookings (`PUT` and `DELETE /booking`). 🔑✨  \n\n#### 📬 Endpoint\n\n``` bash\nPOST /auth\n\n ```\n\n---\n\n#### 📝 Request Body\n\n``` json\n{\n  \"username\": \"admin\",\n  \"password\": \"password123\"\n}\n\n ```\n\n---\n\n#### 📦 Response\n\n``` json\n{\n  \"token\": \"625026321ce550d\"\n}\n\n ```\n\n---\n\n#### 💻 Example Request (curl)\n\n``` bash\ncurl --location 'https://restful-booker.herokuapp.com/auth' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"username\": \"admin\",\n  \"password\": \"password123\"\n}'\n\n\n ```"
					},
					"response": [
						{
							"name": "1.1 Create Token",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " \r\n    {\r\n        \"username\": \"admin\",\r\n        \"password\": \"password123\"\r\n    }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL}}/auth"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1746614365&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=K0Y138bjnl%2F0l%2F5%2BhJpdp9ltMYj8E%2BD70hc%2BjZuxV90%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1746614365&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=K0Y138bjnl%2F0l%2F5%2BhJpdp9ltMYj8E%2BD70hc%2BjZuxV90%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "27"
								},
								{
									"key": "Etag",
									"value": "W/\"1b-U5DAitI+N1iLNu1iX0Q4hxpLtVw\""
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 10:39:25 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"token\": \"625026321ce550d\"\n}"
						}
					]
				}
			],
			"description": "### 🔐 Auth - CreateToken\n\nNeed to update or delete a booking?  \n  \nJust generate your **auth token** here and you’re good to go!  \n  \nThis token gives you secure access to the `PUT` and `DELETE /booking` endpoints. 🎫🔒"
		},
		{
			"name": "2- Booking",
			"item": [
				{
					"name": "2.1 Create Booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomTotalPrice() {\r",
									"  const min = 100;\r",
									"  const max = 900;\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"const totalprice = getRandomTotalPrice();\r",
									"pm.collectionVariables.set(\"totalprice\", totalprice)\r",
									"console.log(\"Total Price:\", totalprice);\r",
									"\r",
									"///////////////////////////////////////////////////////////////\r",
									"\r",
									"function getRandomMeal() {\r",
									"  const meals = [\"breakfast\", \"lunch\", \"dinner\"];\r",
									"  const randomIndex = Math.floor(Math.random() * meals.length);\r",
									"  return meals[randomIndex];\r",
									"}\r",
									"\r",
									"const meal = getRandomMeal();\r",
									"pm.collectionVariables.set(\"additionalneeds\", meal);\r",
									"console.log(\"Random Meal:\", meal);\r",
									"\r",
									"///////////////////////////////////////////////////////////////\r",
									"\r",
									"// Utility to format date as YYYY-MM-DD\r",
									"const formatDate = date => date.toISOString().split('T')[0];\r",
									"\r",
									"// Generate a random check-in date between 1990-01-01 and 1999-12-30\r",
									"const checkin = formatDate(new Date(+new Date('1990-01-01') + Math.random() * (new Date('1999-12-30') - new Date('1990-01-01'))));\r",
									"pm.collectionVariables.set(\"checkin\", checkin);\r",
									"console.log(\"Check-in:\", checkin);\r",
									"\r",
									"// Generate a random checkout date at least 1 day after check-in and before 1999-12-31\r",
									"const nextDay = new Date(checkin);\r",
									"nextDay.setDate(nextDay.getDate() + 1);\r",
									"\r",
									"const endLimit = new Date('1999-12-31');\r",
									"const checkout = nextDay > endLimit\r",
									"  ? formatDate(endLimit)\r",
									"  : formatDate(new Date(+nextDay + Math.random() * (endLimit - nextDay)));\r",
									"\r",
									"pm.collectionVariables.set(\"checkout\", checkout);\r",
									"console.log(\"Check-out:\", checkout);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const requestBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"// Helper to check value existence and type\r",
									"function validateField(value, expectedType = \"string\") {\r",
									"    pm.expect(value, \"Should not be null\").to.not.be.null;\r",
									"    pm.expect(value, \"Should not be undefined\").to.not.be.undefined;\r",
									"    if (expectedType !== \"boolean\" && expectedType !== \"number\") {\r",
									"        pm.expect(value, \"Should not be empty\").to.not.be.empty;\r",
									"    }\r",
									"    pm.expect(typeof value, `Should be of type ${expectedType}`).to.eql(expectedType);\r",
									"}\r",
									"\r",
									"// [2.1] TC01 - Validate status code\r",
									"pm.test(\"[2.1] TC01 - Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// [2.1] TC02 - Validate response time\r",
									"pm.test(\"[2.1] TC02 - Response time < 200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// [2.1] TC03 - Validate response schema\r",
									"pm.test(\"[2.1] TC03 - Response matches expected schema\", () => {\r",
									"    const schema = {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            bookingid: { type: \"integer\" },\r",
									"            booking: {\r",
									"                type: \"object\",\r",
									"                properties: {\r",
									"                    firstname: { type: \"string\" },\r",
									"                    lastname: { type: \"string\" },\r",
									"                    totalprice: { type: \"number\" },\r",
									"                    depositpaid: { type: \"boolean\" },\r",
									"                    bookingdates: {\r",
									"                        type: \"object\",\r",
									"                        properties: {\r",
									"                            checkin: { type: \"string\" },\r",
									"                            checkout: { type: \"string\" }\r",
									"                        },\r",
									"                        required: [\"checkin\", \"checkout\"]\r",
									"                    },\r",
									"                    additionalneeds: { type: \"string\" }\r",
									"                },\r",
									"                required: [\"firstname\", \"lastname\", \"totalprice\", \"depositpaid\", \"bookingdates\"]\r",
									"            }\r",
									"        },\r",
									"        required: [\"bookingid\", \"booking\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// [2.1] TC04 - bookingid is present and a number\r",
									"pm.test(\"[2.1] TC04 - bookingid is present and a number\", () => {\r",
									"    validateField(jsonData.bookingid, \"number\");\r",
									"});\r",
									"\r",
									"// [2.1] TC05 - booking object is valid\r",
									"pm.test(\"[2.1] TC05 - booking object is present and valid\", () => {\r",
									"    validateField(jsonData.booking, \"object\");\r",
									"});\r",
									"\r",
									"// [2.1] TC06 - firstname matches expected\r",
									"pm.test(\"[2.1] TC06 - firstname matches expected value\", () => {\r",
									"    validateField(jsonData.booking.firstname, \"string\");\r",
									"    pm.expect(jsonData.booking.firstname).to.eql(requestBody.firstname);\r",
									"});\r",
									"\r",
									"// [2.1] TC07 - lastname matches expected\r",
									"pm.test(\"[2.1] TC07 - lastname matches expected value\", () => {\r",
									"    validateField(jsonData.booking.lastname, \"string\");\r",
									"    pm.expect(jsonData.booking.lastname).to.eql(requestBody.lastname);\r",
									"});\r",
									"\r",
									"// [2.1] TC08 - totalprice matches expected\r",
									"pm.test(\"[2.1] TC08 - totalprice matches expected value\", () => {\r",
									"    const expectedPrice = parseInt(pm.collectionVariables.get(\"totalprice\"));\r",
									"    validateField(jsonData.booking.totalprice, \"number\");\r",
									"    pm.expect(jsonData.booking.totalprice).to.eql(expectedPrice);\r",
									"});\r",
									"\r",
									"// [2.1] TC09 - depositpaid matches expected\r",
									"pm.test(\"[2.1] TC09 - depositpaid matches expected value\", () => {\r",
									"    validateField(jsonData.booking.depositpaid, \"boolean\");\r",
									"    pm.expect(jsonData.booking.depositpaid).to.eql(requestBody.depositpaid);\r",
									"});\r",
									"\r",
									"// [2.1] TC10 - bookingdates object is valid\r",
									"pm.test(\"[2.1] TC10 - bookingdates is an object\", () => {\r",
									"    validateField(jsonData.booking.bookingdates, \"object\");\r",
									"});\r",
									"\r",
									"// [2.1] TC11 - checkin date matches expected\r",
									"pm.test(\"[2.1] TC11 - checkin matches expected value\", () => {\r",
									"    validateField(jsonData.booking.bookingdates.checkin, \"string\");\r",
									"    pm.expect(jsonData.booking.bookingdates.checkin).to.eql(pm.variables.get(\"checkin\"));\r",
									"});\r",
									"\r",
									"// [2.1] TC12 - checkout date matches expected\r",
									"pm.test(\"[2.1] TC12 - checkout matches expected value\", () => {\r",
									"    validateField(jsonData.booking.bookingdates.checkout, \"string\");\r",
									"    pm.expect(jsonData.booking.bookingdates.checkout).to.eql(pm.variables.get(\"checkout\"));\r",
									"});\r",
									"\r",
									"// [2.1] TC13 - additionalneeds matches expected\r",
									"pm.test(\"[2.1] TC13 - additionalneeds is present and valid\", () => {\r",
									"    validateField(jsonData.booking.additionalneeds, \"string\");\r",
									"    pm.expect(jsonData.booking.additionalneeds).to.eql(pm.variables.get(\"additionalneeds\"));\r",
									"});\r",
									"\r",
									"// [2.1] TC14 - Set all collection variables in one place\r",
									"pm.test(\"[2.1] TC14 - Set collection variables\", () => {\r",
									"    pm.collectionVariables.set(\"bookingid\", jsonData.bookingid);\r",
									"    pm.collectionVariables.set(\"firstname\", jsonData.booking.firstname);\r",
									"    pm.collectionVariables.set(\"lastname\", jsonData.booking.lastname);\r",
									"    pm.collectionVariables.set(\"totalprice\", jsonData.booking.totalprice);\r",
									"    pm.collectionVariables.set(\"depositpaid\", jsonData.booking.depositpaid);\r",
									"    pm.collectionVariables.set(\"checkin\", jsonData.booking.bookingdates.checkin);\r",
									"    pm.collectionVariables.set(\"checkout\", jsonData.booking.bookingdates.checkout);\r",
									"    pm.collectionVariables.set(\"additionalneeds\", jsonData.booking.additionalneeds);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"{{$randomFirstName}}\",\r\n    \"lastname\" : \"{{$randomLastName}}\",\r\n    \"totalprice\" : \"{{totalprice}}\",\r\n    \"depositpaid\" : {{$randomBoolean}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds}}\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}/booking",
						"description": "### 🛏️ Booking - Create a Booking\n\nCreates a new booking in the API Request.  \nThis is an HTTP POST request to create a new booking. The request body should be in raw JSON format 📋✨\n\n---\n\n#### 📬 Endpoint\n\n``` bash\nPOST /booking\n\n ```\n\n---\n\n#### 📝 Request Body (JSON)\n\nSend a JSON object with the following fields:\n\n``` json\n{\n  \"firstname\": \"John\",\n  \"lastname\": \"Doe\",\n  \"totalprice\": 150,\n  \"depositpaid\": true,\n  \"bookingdates\": {\n    \"checkin\": \"2025-05-08\",\n    \"checkout\": \"2025-05-12\"\n  },\n  \"additionalneeds\": \"Breakfast\"\n}\n\n ```\n\n**Fields:**\n\n- `firstname` (string): Guest's first name\n    \n- `lastname` (string): Guest's last name\n    \n- `totalprice` (number): Total booking price\n    \n- `depositpaid` (boolean): Whether the deposit is paid\n    \n- `bookingdates` (object): Includes `checkin` and `checkout` dates\n    \n- `additionalneeds` (string): Any extra requests (e.g., \"Breakfast\", \"Late checkout\")\n    \n\n---\n\n#### 📦 Response\n\nA successful response returns a JSON object with the booking ID and booking details:\n\n``` json\n{\n  \"bookingid\": 1234,\n  \"booking\": {\n    \"firstname\": \"John\",\n    \"lastname\": \"Doe\",\n    \"totalprice\": 150,\n    \"depositpaid\": true,\n    \"bookingdates\": {\n      \"checkin\": \"2025-05-08\",\n      \"checkout\": \"2025-05-12\"\n    },\n    \"additionalneeds\": \"Breakfast\"\n  }\n}\n\n ```\n\n---\n\n📅 **Time to book it and bring in those guests!** 🛎️"
					},
					"response": [
						{
							"name": "2.1 Create Booking",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{$randomFirstName}}\",\r\n    \"lastname\" : \"{{$randomLastName}}\",\r\n    \"totalprice\" : \"{{totalprice}}\",\r\n    \"depositpaid\" : {{$randomBoolean}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL}}/booking"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1746614367&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=X3%2Biaos%2BEhReNRu674jqhnJtG5rl1u9IhGHigmBInXs%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1746614367&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=X3%2Biaos%2BEhReNRu674jqhnJtG5rl1u9IhGHigmBInXs%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "200"
								},
								{
									"key": "Etag",
									"value": "W/\"c8-+EkxdkgBNcQYk7E3XGE+qx/6k10\""
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 10:39:27 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"bookingid\": 4185,\n    \"booking\": {\n        \"firstname\": \"Kacie\",\n        \"lastname\": \"Bahringer\",\n        \"totalprice\": 802,\n        \"depositpaid\": false,\n        \"bookingdates\": {\n            \"checkin\": \"1990-10-05\",\n            \"checkout\": \"1991-05-08\"\n        },\n        \"additionalneeds\": \"lunch\"\n    }\n}"
						}
					]
				},
				{
					"name": "2.2 Get Booking ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"\r",
									"// Helper to validate field existence and type\r",
									"function validateField(value, expectedType = \"string\") {\r",
									"    pm.expect(value, \"Should not be null\").to.not.be.null;\r",
									"    pm.expect(value, \"Should not be undefined\").to.not.be.undefined;\r",
									"    if (expectedType !== \"boolean\" && expectedType !== \"number\") {\r",
									"        pm.expect(value, \"Should not be empty\").to.not.be.empty;\r",
									"    }\r",
									"    pm.expect(typeof value, `Should be of type ${expectedType}`).to.eql(expectedType);\r",
									"}\r",
									"\r",
									"// [2.2] TC01 - Validate status code is 200\r",
									"pm.test(\"[2.2] TC01 - Validate status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// [2.2] TC02 - Validate response time is < 200ms\r",
									"pm.test(\"[2.2] TC02 - Validate response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// [2.2] TC03 - Validate response schema is valid\r",
									"pm.test(\"[2.2] TC03 - Validate response schema is valid\", function () {\r",
									"    const schema = {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            firstname: { type: \"string\" },\r",
									"            lastname: { type: \"string\" },\r",
									"            totalprice: { type: \"number\" },\r",
									"            depositpaid: { type: \"boolean\" },\r",
									"            bookingdates: {\r",
									"                type: \"object\",\r",
									"                properties: {\r",
									"                    checkin: { type: \"string\" },\r",
									"                    checkout: { type: \"string\" }\r",
									"                },\r",
									"                required: [\"checkin\", \"checkout\"]\r",
									"            },\r",
									"            additionalneeds: { type: \"string\" }\r",
									"        },\r",
									"        required: [\"firstname\", \"lastname\", \"totalprice\", \"depositpaid\", \"bookingdates\", \"additionalneeds\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// [2.2] TC04 - Validate firstname\r",
									"pm.test(\"[2.2] TC04 - Validate firstname is correct\", function () {\r",
									"    validateField(data.firstname, \"string\");\r",
									"    pm.expect(data.firstname).to.eql(pm.collectionVariables.get(\"firstname\"));\r",
									"});\r",
									"\r",
									"// [2.2] TC05 - Validate lastname\r",
									"pm.test(\"[2.2] TC05 - Validate lastname is correct\", function () {\r",
									"    validateField(data.lastname, \"string\");\r",
									"    pm.expect(data.lastname).to.eql(pm.collectionVariables.get(\"lastname\"));\r",
									"});\r",
									"\r",
									"// [2.2] TC06 - Validate totalprice\r",
									"pm.test(\"[2.2] TC06 - Validate totalprice is correct\", function () {\r",
									"    validateField(data.totalprice, \"number\");\r",
									"    const expected = parseInt(pm.collectionVariables.get(\"totalprice\"));\r",
									"    pm.expect(data.totalprice).to.eql(expected);\r",
									"});\r",
									"\r",
									"// [2.2] TC07 - Validate depositpaid\r",
									"pm.test(\"[2.2] TC07 - Validate depositpaid is correct\", function () {\r",
									"    validateField(data.depositpaid, \"boolean\");\r",
									"    pm.expect(data.depositpaid).to.eql(pm.collectionVariables.get(\"depositpaid\"));\r",
									"});\r",
									"\r",
									"// [2.2] TC08 - Validate bookingdates object\r",
									"pm.test(\"[2.2] TC08 - Validate bookingdates is an object\", function () {\r",
									"    validateField(data.bookingdates, \"object\");\r",
									"});\r",
									"\r",
									"// [2.2] TC09 - Validate checkin\r",
									"pm.test(\"[2.2] TC09 - Validate checkin is correct\", function () {\r",
									"    validateField(data.bookingdates.checkin, \"string\");\r",
									"    pm.expect(data.bookingdates.checkin).to.eql(pm.collectionVariables.get(\"checkin\"));\r",
									"});\r",
									"\r",
									"// [2.2] TC10 - Validate checkout\r",
									"pm.test(\"[2.2] TC10 - Validate checkout is correct\", function () {\r",
									"    validateField(data.bookingdates.checkout, \"string\");\r",
									"    pm.expect(data.bookingdates.checkout).to.eql(pm.collectionVariables.get(\"checkout\"));\r",
									"});\r",
									"\r",
									"// [2.2] TC11 - Validate additionalneeds\r",
									"pm.test(\"[2.2] TC11 - Validate additionalneeds is correct\", function () {\r",
									"    validateField(data.additionalneeds, \"string\");\r",
									"    pm.expect(data.additionalneeds).to.eql(pm.collectionVariables.get(\"additionalneeds\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/booking/:id",
							"host": [
								"{{URL}}"
							],
							"path": [
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{bookingid}}"
								}
							]
						},
						"description": "### 🔍 Booking - GetBooking\n\nReturns a specific booking based upon the booking id provided .\n\n  \nThis API endpoint makes an HTTP GET request to retrieve the details of a specific booking identified by the provided ID.  \n\n#### 📬 Endpoint\n\nThis API makes an HTTP `GET` request to retrieve details for a specific booking.\n\n**Format:**\n\n``` bash\nGET https://{{URL}}/booking/:id\n\n ```\n\nReplace `:id` with the unique identifier of the booking you're trying to retrieve.\n\n---\n\n#### 📭 Request Body\n\nNo request body is needed — just the booking ID in the URL. 🧾\n\n---\n\n#### 📦 Response Body\n\nA successful response will return all the details related to the booking ID you provided — including booking dates, guest names, price, and any additional needs. 🛏️💼\n\n---\n\n#### 🧾 Response Body (JSON Schema)\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"firstname\": {\n      \"type\": \"string\"\n    },\n    \"lastname\": {\n      \"type\": \"string\"\n    },\n    \"totalprice\": {\n      \"type\": \"number\"\n    },\n    \"depositpaid\": {\n      \"type\": \"boolean\"\n    },\n    \"bookingdates\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"checkin\": {\n          \"type\": \"string\"\n        },\n        \"checkout\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"additionalneeds\": {\n      \"type\": \"string\"\n    }\n  }\n}\n\n ```\n\n---\n\nWant to double-check a booking? Just plug in the ID and you're all set! 🔎📄"
					},
					"response": [
						{
							"name": "2.2 Get Booking ID",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/booking/:id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"booking",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookingid}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1746614370&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=EMx9wj1ARHmZmZFppLZAsOynNTXTrxqin7tkrAFPEOw%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1746614370&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=EMx9wj1ARHmZmZFppLZAsOynNTXTrxqin7tkrAFPEOw%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "171"
								},
								{
									"key": "Etag",
									"value": "W/\"ab-5VXAYCxpa3XHS4aAO6s/P9wn9Po\""
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 10:39:30 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"firstname\": \"Kacie\",\n    \"lastname\": \"Bahringer\",\n    \"totalprice\": 802,\n    \"depositpaid\": false,\n    \"bookingdates\": {\n        \"checkin\": \"1990-10-05\",\n        \"checkout\": \"1991-05-08\"\n    },\n    \"additionalneeds\": \"lunch\"\n}"
						}
					]
				},
				{
					"name": "2.3 Update Booking Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const requestBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"// Helper function for validation\r",
									"function validateField(value, expectedType = \"string\") {\r",
									"    pm.expect(value, \"Should not be null\").to.not.be.null;\r",
									"    pm.expect(value, \"Should not be undefined\").to.not.be.undefined;\r",
									"    if (expectedType !== \"boolean\" && expectedType !== \"number\") {\r",
									"        pm.expect(value, \"Should not be empty\").to.not.be.empty;\r",
									"    }\r",
									"    pm.expect(typeof value, `Should be of type ${expectedType}`).to.eql(expectedType);\r",
									"}\r",
									"\r",
									"// [2.3] TC01 - Validate Status code is 200\r",
									"pm.test(\"[2.3] TC01 - Validate Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// [2.3] TC02 - Validate Response time is less than 200ms\r",
									"pm.test(\"[2.3] TC02 - Validate Response time is less than 200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// [2.3] TC03 - Validate Response Schema is Valid\r",
									"pm.test(\"[2.3] TC03 - Validate Response Schema is Valid\", () => {\r",
									"    const schema = {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            firstname: { type: \"string\" },\r",
									"            lastname: { type: \"string\" },\r",
									"            totalprice: { type: \"number\" },\r",
									"            depositpaid: { type: \"boolean\" },\r",
									"            bookingdates: {\r",
									"                type: \"object\",\r",
									"                properties: {\r",
									"                    checkin: { type: \"string\" },\r",
									"                    checkout: { type: \"string\" }\r",
									"                },\r",
									"                required: [\"checkin\", \"checkout\"]\r",
									"            },\r",
									"            additionalneeds: { type: \"string\" }\r",
									"        },\r",
									"        required: [\"firstname\", \"lastname\", \"totalprice\", \"depositpaid\", \"bookingdates\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// [2.3] TC04 - Validate firstname matches expected value\r",
									"pm.test(\"[2.3] TC04 - Validate firstname matches expected value\", () => {\r",
									"    validateField(jsonData.firstname, \"string\");\r",
									"    pm.expect(jsonData.firstname).to.eql(requestBody.firstname);\r",
									"});\r",
									"\r",
									"// [2.3] TC05 - Validate lastname matches expected value\r",
									"pm.test(\"[2.3] TC05 - Validate lastname matches expected value\", () => {\r",
									"    validateField(jsonData.lastname, \"string\");\r",
									"    pm.expect(jsonData.lastname).to.eql(requestBody.lastname);\r",
									"});\r",
									"\r",
									"// [2.3] TC06 - Validate bookingdates is an object\r",
									"pm.test(\"[2.3] TC06 - Validate bookingdates is an object\", () => {\r",
									"    validateField(jsonData.bookingdates, \"object\");\r",
									"});\r",
									"\r",
									"// [2.3] TC07 - Validate totalprice matches expected value\r",
									"pm.test(\"[2.3] TC07 - Validate totalprice matches expected value\", () => {\r",
									"    const expectedPrice = parseInt(pm.collectionVariables.get(\"totalprice\"));\r",
									"    validateField(jsonData.totalprice, \"number\");\r",
									"    pm.expect(jsonData.totalprice).to.eql(expectedPrice);\r",
									"});\r",
									"\r",
									"// [2.3] TC08 - Validate depositpaid matches expected value\r",
									"pm.test(\"[2.3] TC08 - Validate depositpaid matches expected value\", () => {\r",
									"    validateField(jsonData.depositpaid, \"boolean\");\r",
									"    pm.expect(jsonData.depositpaid).to.eql(requestBody.depositpaid);\r",
									"});\r",
									"\r",
									"// [2.3] TC09 - Validate checkin matches expected value\r",
									"pm.test(\"[2.3] TC09 - Validate checkin matches expected value\", () => {\r",
									"    validateField(jsonData.bookingdates.checkin, \"string\");\r",
									"    pm.expect(jsonData.bookingdates.checkin).to.eql(pm.variables.get(\"checkin\"));\r",
									"});\r",
									"\r",
									"// [2.3] TC10 - Validate checkout matches expected value\r",
									"pm.test(\"[2.3] TC10 - Validate checkout matches expected value\", () => {\r",
									"    validateField(jsonData.bookingdates.checkout, \"string\");\r",
									"    pm.expect(jsonData.bookingdates.checkout).to.eql(pm.variables.get(\"checkout\"));\r",
									"});\r",
									"\r",
									"// [2.3] TC11 - Validate additionalneeds is present and valid\r",
									"pm.test(\"[2.3] TC11 - Validate additionalneeds is present and valid\", () => {\r",
									"    validateField(jsonData.additionalneeds, \"string\");\r",
									"    pm.expect(jsonData.additionalneeds).to.eql(pm.variables.get(\"additionalneeds\"));\r",
									"});\r",
									"\r",
									"// [2.3] TC12 - Set all collection variables\r",
									"pm.test(\"[2.3] TC12 - Set all response values as collection variables\", () => {\r",
									"    pm.collectionVariables.set(\"firstname\", jsonData.firstname);\r",
									"    pm.collectionVariables.set(\"lastname\", jsonData.lastname);\r",
									"    pm.collectionVariables.set(\"totalprice\", jsonData.totalprice);\r",
									"    pm.collectionVariables.set(\"depositpaid\", jsonData.depositpaid);\r",
									"    pm.collectionVariables.set(\"checkin\", jsonData.bookingdates.checkin);\r",
									"    pm.collectionVariables.set(\"checkout\", jsonData.bookingdates.checkout);\r",
									"    pm.collectionVariables.set(\"additionalneeds\", jsonData.additionalneeds);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomTotalPrice() {\r",
									"  const min = 100;\r",
									"  const max = 900;\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"const totalprice = getRandomTotalPrice();\r",
									"pm.collectionVariables.set(\"totalprice\", totalprice)\r",
									"console.log(\"Total Price:\", totalprice);\r",
									"\r",
									"///////////////////////////////////////////////////////////////\r",
									"\r",
									"function getRandomMeal() {\r",
									"  const meals = [\"breakfast\", \"lunch\", \"dinner\"];\r",
									"  const randomIndex = Math.floor(Math.random() * meals.length);\r",
									"  return meals[randomIndex];\r",
									"}\r",
									"\r",
									"const meal = getRandomMeal();\r",
									"pm.collectionVariables.set(\"additionalneeds\", meal);\r",
									"console.log(\"Random Meal:\", meal);\r",
									"\r",
									"///////////////////////////////////////////////////////////////\r",
									"\r",
									"function getRandomDate(start, end) {\r",
									"  const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"  return date.toISOString().split('T')[0]; // format as YYYY-MM-DD\r",
									"}\r",
									"\r",
									"const startDate = new Date('1990-01-01');\r",
									"const endDate = new Date('1999-12-30'); // ensure there's space for checkout to be after\r",
									"const checkin = getRandomDate(startDate, endDate);\r",
									"\r",
									"pm.collectionVariables.set(\"checkin\", checkin);\r",
									"console.log(\"Check-in:\", checkin);\r",
									"\r",
									"///////////////////////////////////////////////////////////////\r",
									"\r",
									"function getRandomCheckoutDate(checkinStr) {\r",
									"  const checkin = new Date(checkinStr);\r",
									"  const nextDay = new Date(checkin);\r",
									"  nextDay.setDate(checkin.getDate() + 1); // at least 1 day after checkin\r",
									"\r",
									"  const endLimit = new Date('1999-12-31');\r",
									"  if (nextDay > endLimit) return endLimit.toISOString().split('T')[0];\r",
									"\r",
									"  const checkout = new Date(nextDay.getTime() + Math.random() * (endLimit.getTime() - nextDay.getTime()));\r",
									"  return checkout.toISOString().split('T')[0];\r",
									"}\r",
									"\r",
									"const checkinStr = pm.collectionVariables.get(\"checkin\");\r",
									"const checkout = getRandomCheckoutDate(checkinStr);\r",
									"\r",
									"pm.collectionVariables.set(\"checkout\", checkout);\r",
									"console.log(\"Check-out:\", checkout);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "token={{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"{{$randomFirstName}}\",\r\n    \"lastname\" : \"{{$randomLastName}}\",\r\n    \"totalprice\" : \"{{totalprice}}\",\r\n    \"depositpaid\" : {{$randomBoolean}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds}}\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/booking/:id",
							"host": [
								"{{URL}}"
							],
							"path": [
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{bookingid}}",
									"type": "string"
								}
							]
						},
						"description": "### ✏️ Booking - UpdateBooking\n\nThis endpoint lets you **update an existing booking** with new guest info, updated dates, or even extra needs like breakfast or a late checkout. 🧳🛎️\n\n---\n\n#### 📬 Endpoint\n\nReplace `:id` with the unique ID of the booking you'd like to update.\n\n---\n\n#### 📝 Request Body\n\nThe request should include the full set of booking details in JSON format:\n\n**Fields:**\n\n| Field | Type | Required | Description |\n| --- | --- | --- | --- |\n| `firstname` | string | ✅ | Guest’s first name |\n| `lastname` | string | ✅ | Guest’s last name |\n| `totalprice` | number | ✅ | Total price for the booking |\n| `depositpaid` | boolean | ✅ | Indicates if the deposit has been paid |\n| `bookingdates` | object | ✅ | Includes `checkin` and `checkout` dates |\n| `additionalneeds` | string | ❌ | Optional special requests |\n\n---\n\n#### 📦 Response\n\nUpon success, the response will confirm the updated booking details, including the booking ID and the new data:\n\n---\n\n📋 **Need to fix a name, change dates, or update a price?** This endpoint makes it smooth and simple to keep your bookings up-to-date! ✅🗓️"
					},
					"response": [
						{
							"name": "2.3 Update Booking Data",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "token={{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{$randomFirstName}}\",\r\n    \"lastname\" : \"{{$randomLastName}}\",\r\n    \"totalprice\" : \"{{totalprice}}\",\r\n    \"depositpaid\" : {{$randomBoolean}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/booking/:id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"booking",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookingid}}",
											"type": "string"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1746614372&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=obJxKfxEBBEji5BW3Bu4tFBT8MfCPOo%2FTduygW9%2F5pU%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1746614372&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=obJxKfxEBBEji5BW3Bu4tFBT8MfCPOo%2FTduygW9%2F5pU%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "166"
								},
								{
									"key": "Etag",
									"value": "W/\"a6-KSDkFykb64giOO+mKGH1oUeUHZU\""
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 10:39:32 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"firstname\": \"Kiley\",\n    \"lastname\": \"Bayer\",\n    \"totalprice\": 447,\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"1993-07-18\",\n        \"checkout\": \"1998-07-11\"\n    },\n    \"additionalneeds\": \"lunch\"\n}"
						}
					]
				},
				{
					"name": "2.4 Get Booking ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"\r",
									"// Helper function to validate field existence and type\r",
									"function validateField(value, expectedType = \"string\") {\r",
									"    pm.expect(value, \"Should not be null\").to.not.be.null;\r",
									"    pm.expect(value, \"Should not be undefined\").to.not.be.undefined;\r",
									"    if (expectedType !== \"boolean\" && expectedType !== \"number\") {\r",
									"        pm.expect(value, \"Should not be empty\").to.not.be.empty;\r",
									"    }\r",
									"    pm.expect(typeof value, `Should be of type ${expectedType}`).to.eql(expectedType);\r",
									"}\r",
									"\r",
									"// [2.4] TC01 - Validate status code is 200\r",
									"pm.test(\"[2.4] TC01 - Validate status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// [2.4] TC02 - Validate response time is < 200ms\r",
									"pm.test(\"[2.4] TC02 - Validate response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// [2.4] TC03 - Validate response schema is valid\r",
									"pm.test(\"[2.4] TC03 - Validate response schema is valid\", function () {\r",
									"    const schema = {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            firstname: { type: \"string\" },\r",
									"            lastname: { type: \"string\" },\r",
									"            totalprice: { type: \"number\" },\r",
									"            depositpaid: { type: \"boolean\" },\r",
									"            bookingdates: {\r",
									"                type: \"object\",\r",
									"                properties: {\r",
									"                    checkin: { type: \"string\" },\r",
									"                    checkout: { type: \"string\" }\r",
									"                },\r",
									"                required: [\"checkin\", \"checkout\"]\r",
									"            },\r",
									"            additionalneeds: { type: \"string\" }\r",
									"        },\r",
									"        required: [\"firstname\", \"lastname\", \"totalprice\", \"depositpaid\", \"bookingdates\", \"additionalneeds\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// [2.4] TC04 - Validate firstname\r",
									"pm.test(\"[2.4] TC04 - Validate firstname is correct\", function () {\r",
									"    validateField(data.firstname, \"string\");\r",
									"    pm.expect(data.firstname).to.eql(pm.collectionVariables.get(\"firstname\"));\r",
									"});\r",
									"\r",
									"// [2.4] TC05 - Validate lastname\r",
									"pm.test(\"[2.4] TC05 - Validate lastname is correct\", function () {\r",
									"    validateField(data.lastname, \"string\");\r",
									"    pm.expect(data.lastname).to.eql(pm.collectionVariables.get(\"lastname\"));\r",
									"});\r",
									"\r",
									"// [2.4] TC06 - Validate totalprice\r",
									"pm.test(\"[2.4] TC06 - Validate totalprice is correct\", function () {\r",
									"    validateField(data.totalprice, \"number\");\r",
									"    const expected = parseInt(pm.collectionVariables.get(\"totalprice\"));\r",
									"    pm.expect(data.totalprice).to.eql(expected);\r",
									"});\r",
									"\r",
									"// [2.4] TC07 - Validate depositpaid\r",
									"pm.test(\"[2.4] TC07 - Validate depositpaid is correct\", function () {\r",
									"    validateField(data.depositpaid, \"boolean\");\r",
									"    pm.expect(data.depositpaid).to.eql(pm.collectionVariables.get(\"depositpaid\"));\r",
									"});\r",
									"\r",
									"// [2.4] TC08 - Validate bookingdates object\r",
									"pm.test(\"[2.4] TC08 - Validate bookingdates is an object\", function () {\r",
									"    validateField(data.bookingdates, \"object\");\r",
									"});\r",
									"\r",
									"// [2.4] TC09 - Validate checkin\r",
									"pm.test(\"[2.4] TC09 - Validate checkin is correct\", function () {\r",
									"    validateField(data.bookingdates.checkin, \"string\");\r",
									"    pm.expect(data.bookingdates.checkin).to.eql(pm.collectionVariables.get(\"checkin\"));\r",
									"});\r",
									"\r",
									"// [2.4] TC10 - Validate checkout\r",
									"pm.test(\"[2.4] TC10 - Validate checkout is correct\", function () {\r",
									"    validateField(data.bookingdates.checkout, \"string\");\r",
									"    pm.expect(data.bookingdates.checkout).to.eql(pm.collectionVariables.get(\"checkout\"));\r",
									"});\r",
									"\r",
									"// [2.4] TC11 - Validate additionalneeds\r",
									"pm.test(\"[2.4] TC11 - Validate additionalneeds is correct\", function () {\r",
									"    validateField(data.additionalneeds, \"string\");\r",
									"    pm.expect(data.additionalneeds).to.eql(pm.collectionVariables.get(\"additionalneeds\"));\r",
									"});\r",
									"\r",
									"// [2.4] TC12 - Set all values in one place\r",
									"pm.test(\"[2.4] TC12 - Set all collection variables\", function () {\r",
									"    pm.collectionVariables.set(\"firstname\", data.firstname);\r",
									"    pm.collectionVariables.set(\"lastname\", data.lastname);\r",
									"    pm.collectionVariables.set(\"totalprice\", data.totalprice);\r",
									"    pm.collectionVariables.set(\"depositpaid\", data.depositpaid);\r",
									"    pm.collectionVariables.set(\"checkin\", data.bookingdates.checkin);\r",
									"    pm.collectionVariables.set(\"checkout\", data.bookingdates.checkout);\r",
									"    pm.collectionVariables.set(\"additionalneeds\", data.additionalneeds);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/booking/:id",
							"host": [
								"{{URL}}"
							],
							"path": [
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{bookingid}}"
								}
							]
						},
						"description": "### 🔎 Retrieve Booking Details\n\nThis endpoint allows you to **retrieve the full details of a booking** using the unique booking ID. It's a simple `GET` request to bring up everything you need to know. 📄✨\n\n---\n\n#### 📬 Request\n\n- **Method:** `GET`\n    \n- bashنسختحريرhttps://{{URL}}/booking/:id\n    \n    Replace `:id` with the actual booking ID you wish to fetch.\n    \n\n---\n\n#### 📦 Response\n\nOn success, you'll receive a JSON object containing all the key booking details — from guest names and booking dates to payment status and additional needs.\n\n``` json\n{\n  \"firstname\": \"Jane\",\n  \"lastname\": \"Smith\",\n  \"totalprice\": 200,\n  \"depositpaid\": true,\n  \"bookingdates\": {\n    \"checkin\": \"2025-06-10\",\n    \"checkout\": \"2025-06-15\"\n  },\n  \"additionalneeds\": \"Breakfast\"\n}\n\n ```\n\n#### 🧾 JSON Schema\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"firstname\": { \"type\": \"string\" },\n    \"lastname\": { \"type\": \"string\" },\n    \"totalprice\": { \"type\": \"integer\" },\n    \"depositpaid\": { \"type\": \"boolean\" },\n    \"bookingdates\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"checkin\": { \"type\": \"string\", \"format\": \"date\" },\n        \"checkout\": { \"type\": \"string\", \"format\": \"date\" }\n      }\n    },\n    \"additionalneeds\": { \"type\": \"string\" }\n  }\n}\n\n ```\n\n---\n\n🎯 Just provide a booking ID, and this endpoint will return everything you need to know about that"
					},
					"response": [
						{
							"name": "2.4 Get Booking ID",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/booking/:id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"booking",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookingid}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1746614374&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=czUHg42LwpAAIelA2Noqv6GuhZOCnwx1Lyxc4Z7p6po%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1746614374&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=czUHg42LwpAAIelA2Noqv6GuhZOCnwx1Lyxc4Z7p6po%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "166"
								},
								{
									"key": "Etag",
									"value": "W/\"a6-KSDkFykb64giOO+mKGH1oUeUHZU\""
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 10:39:34 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"firstname\": \"Kiley\",\n    \"lastname\": \"Bayer\",\n    \"totalprice\": 447,\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"1993-07-18\",\n        \"checkout\": \"1998-07-11\"\n    },\n    \"additionalneeds\": \"lunch\"\n}"
						}
					]
				},
				{
					"name": "2.5 Delete Booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[2.5] TC01 Validate Status code is 204\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.5] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.5]] TC03 Validate Check response body to not contain bookId\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"bookingid\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/booking/:id",
							"host": [
								"{{URL}}"
							],
							"path": [
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{bookingid}}"
								}
							]
						},
						"description": "StartFragment\n\n### 🗑️ Booking - DeleteBooking\n\nTime to say goodbye to a reservation? This endpoint allows you to **delete a specific booking** by simply passing its ID in the URL. Clean, quick, and final. 💥\n\n---\n\n#### 📬 Request\n\n- **Method:** `DELETE`\n    \n- **URL Format:**\n    \n\n``` bash\nhttps://{{URL}}/booking/:id\n ```\n\nReplace `:id` with the booking ID you want to remove.\n\n📭 **Request Body:**\n\nNo request body is needed — just the ID in the URL.\n\n---\n\n#### 📦 Response\n\nWhen the deletion is successful, you’ll receive:\n\n- **Status:** `201 Created`\n    \n- **Content-Type:** `text/plain`\n    \n- Body:\n    \n\n``` bash\nCreated\n\n ```\n\n🚀 Whether it’s a cancellation or cleanup, this endpoint helps you keep things tidy and up-to-date. Let me"
					},
					"response": [
						{
							"name": "2.5 Delete Booking",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "token={{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/booking/:id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"booking",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookingid}}"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1746614376&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=N0ekSit1DyJ257Co7QacSmGFe60ztwlF%2BFTwplysAZ8%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1746614376&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=N0ekSit1DyJ257Co7QacSmGFe60ztwlF%2BFTwplysAZ8%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "7"
								},
								{
									"key": "Etag",
									"value": "W/\"7-rM9AyJuqT6iOan/xHh+AW+7K/T8\""
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 10:39:36 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "Created"
						}
					]
				},
				{
					"name": "2.6 Get Booking ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[2.6] TC01 Validate Response Code For Adding New Book is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.have.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.6] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/booking/:id",
							"host": [
								"{{URL}}"
							],
							"path": [
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{bookingid}}"
								}
							]
						},
						"description": "### ❓ Retrieve Booking Details (After Deletion)\n\nTrying to fetch a booking that may have been removed? This endpoint checks for the existence of a booking using its ID. It's a great way to verify whether a deletion actually succeeded. 🕵️‍♂️🗂️\n\n---\n\n#### 📬 Request\n\n- **Method:** `GET`\n    \n\n``` bash\nhttps://{{URL}}/booking/:id\n ```\n\nReplace `:id` with the unique booking identifier you're looking for.\n\n---\n\n#### 🧾 URL Parameters\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `:id` | string | The unique ID of the booking |\n\n---\n\n#### 📦 Response\n\nThe response is a JSON object containing all booking details—**if the booking exists**. If the booking was successfully deleted earlier, this request is likely to return a `404 Not Found` or an empty result.\n\nHere’s the expected structure when a booking **is found**:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"bookingid\": { \"type\": \"integer\" },\n    \"booking\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"firstname\": { \"type\": \"string\" },\n        \"lastname\": { \"type\": \"string\" },\n        \"totalprice\": { \"type\": \"integer\" },\n        \"depositpaid\": { \"type\": \"boolean\" },\n        \"bookingdates\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"checkin\": { \"type\": \"string\", \"format\": \"date-time\" },\n            \"checkout\": { \"type\": \"string\", \"format\": \"date-time\" }\n          }\n        },\n        \"additionalneeds\": { \"type\": \"string\" }\n      }\n    },\n    \"additionalinfo\": { \"type\": \"string\" }\n  }\n}\n\n ```\n\n---\n\n🧹 **Tip:** If you receive a `404` here, that’s confirmation your deletion went through! ✅"
					},
					"response": [
						{
							"name": "2.6 Get Booking ID",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/booking/:id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"booking",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookingid}}"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1746614379&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=i6Ii4Hvk6gfZxidOoQgHTnXcT0xSH1FQYLuxMw%2FoA3w%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1746614379&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=i6Ii4Hvk6gfZxidOoQgHTnXcT0xSH1FQYLuxMw%2FoA3w%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "9"
								},
								{
									"key": "Etag",
									"value": "W/\"9-0gXL1ngzMqISxa6S1zx3F4wtLyg\""
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 10:39:39 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "Not Found"
						}
					]
				}
			],
			"description": "### 📋 Booking - Get All Bookings\n\nWant the full guest list? 🎟️  \n  \nThis endpoint returns the **IDs of all bookings** in the system!  \n  \nYou can also add optional query strings to filter and fetch just the bookings you're looking for. 🕵️‍♂️✨"
		},
		{
			"name": "3- Ping",
			"item": [
				{
					"name": "3.1 Ping - HealthCheck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[3.1] TC01 Validate Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}/ping",
						"description": "### 🛎️ GET /ping\n\nNeed to check if the service is up and running? This endpoint is your friendly **health check** — like knocking on the server’s door to make sure it’s home. 🏠🔍\n\n---\n\n#### 📬 Request\n\n- **Method:** `GET`\n    \n- arduinoنسختحريرhttps://{{URL}}/ping\n    \n- **Request Body:**  \n      \n    None required — just send the request and wait for a response.\n    \n\n---\n\n#### 📦 Response\n\n| Property | Value |\n| --- | --- |\n| **Status** | `201 Created` |\n| **Content-Type** | `text/plain` |\n| **Body** | `Created` |\n\n---\n\n#### 🧾 Response Body Schema\n\n``` bash\n{\n  \"type\": \"string\"\n}\n\n ```\n\n---\n\n📡 Whether you're setting up monitoring or just double-checking availability, this simple ping gives you peace of mind that the API is alive and ready to serve!"
					},
					"response": [
						{
							"name": "3.1 Ping - HealthCheck",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{URL}}/ping"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1746614382&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8B%2Bxx0ZO6CdqqtguHRkZKgeoA%2FsvD4FEAGbQVmXw1GM%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1746614382&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8B%2Bxx0ZO6CdqqtguHRkZKgeoA%2FsvD4FEAGbQVmXw1GM%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "7"
								},
								{
									"key": "Etag",
									"value": "W/\"7-rM9AyJuqT6iOan/xHh+AW+7K/T8\""
								},
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 10:39:42 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "Created"
						}
					]
				}
			],
			"description": "### 📡 GET /ping — Service Check\n\nFeeling curious? Give the API a little _ping_! 🛎️"
		}
	],
	"variable": [
		{
			"key": "totalprice",
			"value": ""
		},
		{
			"key": "additionalneeds",
			"value": ""
		},
		{
			"key": "checkin",
			"value": ""
		},
		{
			"key": "checkout",
			"value": ""
		},
		{
			"key": "bookingid",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "firstname",
			"value": ""
		},
		{
			"key": "lastname",
			"value": ""
		},
		{
			"key": "depositpaid",
			"value": ""
		}
	]
}